package testing.evaluation;

import structure.Combinatorial_Iteration;

/**
<b>
Purpose: Test the correctness of {@link structure#Combinatorial_Iteration.java}<br>
Programmer: Gabriel Toban Harris<br>
Date: 2022-10-08/2022-10-10
</b>
*/

public class Test_Combinatorial_Algorithm
{
    public static void main(String[] args)
    {
        String[] simple_test_data = new String[]{"a", "b", "c", "d"};
        Combinatorial_Iteration<String> simple_test = new Combinatorial_Iteration<String>(2, simple_test_data);
        long simple_counter = 1; //count starting combination
        long simple_test_combination_count = Combinatorial_Iteration.total_combination_count(4, 2);
        System.out.println(simple_test.get_safe_current_combination());
        do
        {
            ++simple_counter;
            System.out.println(simple_test.safe_next_combincation());
        } while (!simple_test.done());

        System.out.println("Expected number of combination matches: " + (simple_counter == simple_test_combination_count) + ", incremented value: " + simple_counter +
                           ", and calculated value: " + simple_test_combination_count);
        
        teting_subroutine(1, 3);
        teting_subroutine(5, 8);
        teting_subroutine(3, 9);
        teting_subroutine(5, 10);
    }
    
    /**
     * Simple subroutine for carrying out test. Should output all combination and have resulting counts match.
     * 
     * @param CHOOSE number of choose
     * @param OPTIONS what is being chosen from
     */
    public static void teting_subroutine(final int CHOOSE, final int OPTIONS)
    {
        Integer[] test_data = new Integer[OPTIONS];
        for (int i = 0; i < OPTIONS; ++i)
            test_data[i] = i;

        {
            long iteration_counter = 1; //count starting combination
            long simple_test_combination_count = Combinatorial_Iteration.total_combination_count(test_data.length, CHOOSE);
            Combinatorial_Iteration<Integer> test_combinatorial = new Combinatorial_Iteration<Integer>(CHOOSE, test_data);

            System.out.println(test_combinatorial.get_safe_current_combination());
            do
            {
                ++iteration_counter;
                System.out.println(test_combinatorial.safe_next_combincation());
            } while (!test_combinatorial.done());

            System.out.println("Expected number of combination matches: " + (iteration_counter == simple_test_combination_count) + ", incremented value: " + iteration_counter +
                               ", and calculated value: " + simple_test_combination_count);
        }
    }
}
/*
 Expected test results:
[a, b]
[a, c]
[a, d]
[b, c]
[b, d]
[c, d]
Expected number of combination matches: true, incremented value: 6, and calculated value: 6
[0]
[1]
[2]
Expected number of combination matches: true, incremented value: 3, and calculated value: 3
[0, 1, 2, 3, 4]
[0, 1, 2, 3, 5]
[0, 1, 2, 3, 6]
[0, 1, 2, 3, 7]
[0, 1, 2, 4, 5]
[0, 1, 2, 4, 6]
[0, 1, 2, 4, 7]
[0, 1, 2, 5, 6]
[0, 1, 2, 5, 7]
[0, 1, 2, 6, 7]
[0, 1, 3, 4, 5]
[0, 1, 3, 4, 6]
[0, 1, 3, 4, 7]
[0, 1, 3, 5, 6]
[0, 1, 3, 5, 7]
[0, 1, 3, 6, 7]
[0, 1, 4, 5, 6]
[0, 1, 4, 5, 7]
[0, 1, 4, 6, 7]
[0, 1, 5, 6, 7]
[0, 2, 3, 4, 5]
[0, 2, 3, 4, 6]
[0, 2, 3, 4, 7]
[0, 2, 3, 5, 6]
[0, 2, 3, 5, 7]
[0, 2, 3, 6, 7]
[0, 2, 4, 5, 6]
[0, 2, 4, 5, 7]
[0, 2, 4, 6, 7]
[0, 2, 5, 6, 7]
[0, 3, 4, 5, 6]
[0, 3, 4, 5, 7]
[0, 3, 4, 6, 7]
[0, 3, 5, 6, 7]
[0, 4, 5, 6, 7]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 6]
[1, 2, 3, 4, 7]
[1, 2, 3, 5, 6]
[1, 2, 3, 5, 7]
[1, 2, 3, 6, 7]
[1, 2, 4, 5, 6]
[1, 2, 4, 5, 7]
[1, 2, 4, 6, 7]
[1, 2, 5, 6, 7]
[1, 3, 4, 5, 6]
[1, 3, 4, 5, 7]
[1, 3, 4, 6, 7]
[1, 3, 5, 6, 7]
[1, 4, 5, 6, 7]
[2, 3, 4, 5, 6]
[2, 3, 4, 5, 7]
[2, 3, 4, 6, 7]
[2, 3, 5, 6, 7]
[2, 4, 5, 6, 7]
[3, 4, 5, 6, 7]
Expected number of combination matches: true, incremented value: 56, and calculated value: 56
[0, 1, 2]
[0, 1, 3]
[0, 1, 4]
[0, 1, 5]
[0, 1, 6]
[0, 1, 7]
[0, 1, 8]
[0, 2, 3]
[0, 2, 4]
[0, 2, 5]
[0, 2, 6]
[0, 2, 7]
[0, 2, 8]
[0, 3, 4]
[0, 3, 5]
[0, 3, 6]
[0, 3, 7]
[0, 3, 8]
[0, 4, 5]
[0, 4, 6]
[0, 4, 7]
[0, 4, 8]
[0, 5, 6]
[0, 5, 7]
[0, 5, 8]
[0, 6, 7]
[0, 6, 8]
[0, 7, 8]
[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 2, 6]
[1, 2, 7]
[1, 2, 8]
[1, 3, 4]
[1, 3, 5]
[1, 3, 6]
[1, 3, 7]
[1, 3, 8]
[1, 4, 5]
[1, 4, 6]
[1, 4, 7]
[1, 4, 8]
[1, 5, 6]
[1, 5, 7]
[1, 5, 8]
[1, 6, 7]
[1, 6, 8]
[1, 7, 8]
[2, 3, 4]
[2, 3, 5]
[2, 3, 6]
[2, 3, 7]
[2, 3, 8]
[2, 4, 5]
[2, 4, 6]
[2, 4, 7]
[2, 4, 8]
[2, 5, 6]
[2, 5, 7]
[2, 5, 8]
[2, 6, 7]
[2, 6, 8]
[2, 7, 8]
[3, 4, 5]
[3, 4, 6]
[3, 4, 7]
[3, 4, 8]
[3, 5, 6]
[3, 5, 7]
[3, 5, 8]
[3, 6, 7]
[3, 6, 8]
[3, 7, 8]
[4, 5, 6]
[4, 5, 7]
[4, 5, 8]
[4, 6, 7]
[4, 6, 8]
[4, 7, 8]
[5, 6, 7]
[5, 6, 8]
[5, 7, 8]
[6, 7, 8]
Expected number of combination matches: true, incremented value: 84, and calculated value: 84
[0, 1, 2, 3, 4]
[0, 1, 2, 3, 5]
[0, 1, 2, 3, 6]
[0, 1, 2, 3, 7]
[0, 1, 2, 3, 8]
[0, 1, 2, 3, 9]
[0, 1, 2, 4, 5]
[0, 1, 2, 4, 6]
[0, 1, 2, 4, 7]
[0, 1, 2, 4, 8]
[0, 1, 2, 4, 9]
[0, 1, 2, 5, 6]
[0, 1, 2, 5, 7]
[0, 1, 2, 5, 8]
[0, 1, 2, 5, 9]
[0, 1, 2, 6, 7]
[0, 1, 2, 6, 8]
[0, 1, 2, 6, 9]
[0, 1, 2, 7, 8]
[0, 1, 2, 7, 9]
[0, 1, 2, 8, 9]
[0, 1, 3, 4, 5]
[0, 1, 3, 4, 6]
[0, 1, 3, 4, 7]
[0, 1, 3, 4, 8]
[0, 1, 3, 4, 9]
[0, 1, 3, 5, 6]
[0, 1, 3, 5, 7]
[0, 1, 3, 5, 8]
[0, 1, 3, 5, 9]
[0, 1, 3, 6, 7]
[0, 1, 3, 6, 8]
[0, 1, 3, 6, 9]
[0, 1, 3, 7, 8]
[0, 1, 3, 7, 9]
[0, 1, 3, 8, 9]
[0, 1, 4, 5, 6]
[0, 1, 4, 5, 7]
[0, 1, 4, 5, 8]
[0, 1, 4, 5, 9]
[0, 1, 4, 6, 7]
[0, 1, 4, 6, 8]
[0, 1, 4, 6, 9]
[0, 1, 4, 7, 8]
[0, 1, 4, 7, 9]
[0, 1, 4, 8, 9]
[0, 1, 5, 6, 7]
[0, 1, 5, 6, 8]
[0, 1, 5, 6, 9]
[0, 1, 5, 7, 8]
[0, 1, 5, 7, 9]
[0, 1, 5, 8, 9]
[0, 1, 6, 7, 8]
[0, 1, 6, 7, 9]
[0, 1, 6, 8, 9]
[0, 1, 7, 8, 9]
[0, 2, 3, 4, 5]
[0, 2, 3, 4, 6]
[0, 2, 3, 4, 7]
[0, 2, 3, 4, 8]
[0, 2, 3, 4, 9]
[0, 2, 3, 5, 6]
[0, 2, 3, 5, 7]
[0, 2, 3, 5, 8]
[0, 2, 3, 5, 9]
[0, 2, 3, 6, 7]
[0, 2, 3, 6, 8]
[0, 2, 3, 6, 9]
[0, 2, 3, 7, 8]
[0, 2, 3, 7, 9]
[0, 2, 3, 8, 9]
[0, 2, 4, 5, 6]
[0, 2, 4, 5, 7]
[0, 2, 4, 5, 8]
[0, 2, 4, 5, 9]
[0, 2, 4, 6, 7]
[0, 2, 4, 6, 8]
[0, 2, 4, 6, 9]
[0, 2, 4, 7, 8]
[0, 2, 4, 7, 9]
[0, 2, 4, 8, 9]
[0, 2, 5, 6, 7]
[0, 2, 5, 6, 8]
[0, 2, 5, 6, 9]
[0, 2, 5, 7, 8]
[0, 2, 5, 7, 9]
[0, 2, 5, 8, 9]
[0, 2, 6, 7, 8]
[0, 2, 6, 7, 9]
[0, 2, 6, 8, 9]
[0, 2, 7, 8, 9]
[0, 3, 4, 5, 6]
[0, 3, 4, 5, 7]
[0, 3, 4, 5, 8]
[0, 3, 4, 5, 9]
[0, 3, 4, 6, 7]
[0, 3, 4, 6, 8]
[0, 3, 4, 6, 9]
[0, 3, 4, 7, 8]
[0, 3, 4, 7, 9]
[0, 3, 4, 8, 9]
[0, 3, 5, 6, 7]
[0, 3, 5, 6, 8]
[0, 3, 5, 6, 9]
[0, 3, 5, 7, 8]
[0, 3, 5, 7, 9]
[0, 3, 5, 8, 9]
[0, 3, 6, 7, 8]
[0, 3, 6, 7, 9]
[0, 3, 6, 8, 9]
[0, 3, 7, 8, 9]
[0, 4, 5, 6, 7]
[0, 4, 5, 6, 8]
[0, 4, 5, 6, 9]
[0, 4, 5, 7, 8]
[0, 4, 5, 7, 9]
[0, 4, 5, 8, 9]
[0, 4, 6, 7, 8]
[0, 4, 6, 7, 9]
[0, 4, 6, 8, 9]
[0, 4, 7, 8, 9]
[0, 5, 6, 7, 8]
[0, 5, 6, 7, 9]
[0, 5, 6, 8, 9]
[0, 5, 7, 8, 9]
[0, 6, 7, 8, 9]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 6]
[1, 2, 3, 4, 7]
[1, 2, 3, 4, 8]
[1, 2, 3, 4, 9]
[1, 2, 3, 5, 6]
[1, 2, 3, 5, 7]
[1, 2, 3, 5, 8]
[1, 2, 3, 5, 9]
[1, 2, 3, 6, 7]
[1, 2, 3, 6, 8]
[1, 2, 3, 6, 9]
[1, 2, 3, 7, 8]
[1, 2, 3, 7, 9]
[1, 2, 3, 8, 9]
[1, 2, 4, 5, 6]
[1, 2, 4, 5, 7]
[1, 2, 4, 5, 8]
[1, 2, 4, 5, 9]
[1, 2, 4, 6, 7]
[1, 2, 4, 6, 8]
[1, 2, 4, 6, 9]
[1, 2, 4, 7, 8]
[1, 2, 4, 7, 9]
[1, 2, 4, 8, 9]
[1, 2, 5, 6, 7]
[1, 2, 5, 6, 8]
[1, 2, 5, 6, 9]
[1, 2, 5, 7, 8]
[1, 2, 5, 7, 9]
[1, 2, 5, 8, 9]
[1, 2, 6, 7, 8]
[1, 2, 6, 7, 9]
[1, 2, 6, 8, 9]
[1, 2, 7, 8, 9]
[1, 3, 4, 5, 6]
[1, 3, 4, 5, 7]
[1, 3, 4, 5, 8]
[1, 3, 4, 5, 9]
[1, 3, 4, 6, 7]
[1, 3, 4, 6, 8]
[1, 3, 4, 6, 9]
[1, 3, 4, 7, 8]
[1, 3, 4, 7, 9]
[1, 3, 4, 8, 9]
[1, 3, 5, 6, 7]
[1, 3, 5, 6, 8]
[1, 3, 5, 6, 9]
[1, 3, 5, 7, 8]
[1, 3, 5, 7, 9]
[1, 3, 5, 8, 9]
[1, 3, 6, 7, 8]
[1, 3, 6, 7, 9]
[1, 3, 6, 8, 9]
[1, 3, 7, 8, 9]
[1, 4, 5, 6, 7]
[1, 4, 5, 6, 8]
[1, 4, 5, 6, 9]
[1, 4, 5, 7, 8]
[1, 4, 5, 7, 9]
[1, 4, 5, 8, 9]
[1, 4, 6, 7, 8]
[1, 4, 6, 7, 9]
[1, 4, 6, 8, 9]
[1, 4, 7, 8, 9]
[1, 5, 6, 7, 8]
[1, 5, 6, 7, 9]
[1, 5, 6, 8, 9]
[1, 5, 7, 8, 9]
[1, 6, 7, 8, 9]
[2, 3, 4, 5, 6]
[2, 3, 4, 5, 7]
[2, 3, 4, 5, 8]
[2, 3, 4, 5, 9]
[2, 3, 4, 6, 7]
[2, 3, 4, 6, 8]
[2, 3, 4, 6, 9]
[2, 3, 4, 7, 8]
[2, 3, 4, 7, 9]
[2, 3, 4, 8, 9]
[2, 3, 5, 6, 7]
[2, 3, 5, 6, 8]
[2, 3, 5, 6, 9]
[2, 3, 5, 7, 8]
[2, 3, 5, 7, 9]
[2, 3, 5, 8, 9]
[2, 3, 6, 7, 8]
[2, 3, 6, 7, 9]
[2, 3, 6, 8, 9]
[2, 3, 7, 8, 9]
[2, 4, 5, 6, 7]
[2, 4, 5, 6, 8]
[2, 4, 5, 6, 9]
[2, 4, 5, 7, 8]
[2, 4, 5, 7, 9]
[2, 4, 5, 8, 9]
[2, 4, 6, 7, 8]
[2, 4, 6, 7, 9]
[2, 4, 6, 8, 9]
[2, 4, 7, 8, 9]
[2, 5, 6, 7, 8]
[2, 5, 6, 7, 9]
[2, 5, 6, 8, 9]
[2, 5, 7, 8, 9]
[2, 6, 7, 8, 9]
[3, 4, 5, 6, 7]
[3, 4, 5, 6, 8]
[3, 4, 5, 6, 9]
[3, 4, 5, 7, 8]
[3, 4, 5, 7, 9]
[3, 4, 5, 8, 9]
[3, 4, 6, 7, 8]
[3, 4, 6, 7, 9]
[3, 4, 6, 8, 9]
[3, 4, 7, 8, 9]
[3, 5, 6, 7, 8]
[3, 5, 6, 7, 9]
[3, 5, 6, 8, 9]
[3, 5, 7, 8, 9]
[3, 6, 7, 8, 9]
[4, 5, 6, 7, 8]
[4, 5, 6, 7, 9]
[4, 5, 6, 8, 9]
[4, 5, 7, 8, 9]
[4, 6, 7, 8, 9]
[5, 6, 7, 8, 9]
Expected number of combination matches: true, incremented value: 252, and calculated value: 252
 */
